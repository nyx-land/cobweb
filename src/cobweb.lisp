(in-package :cobweb)

(defgeneric set-hierarchy (obj parent)
  (:documentation "Set the hierachy on initialization.")
  (:method (obj parent) t)
  (:method ((obj html-tag) (parent html-tag))
    (setf (parent obj) parent)
    (setf (depth obj) (1+ (depth parent)))
    (set-hierarchy (body obj) obj))
  (:method ((obj html-tag) (parent vector))
    (setf (parent obj) :root)
    (setf (depth obj) 0)
    (set-hierarchy (body obj) obj))
  (:method ((obj vector) (parent html-tag))
    (loop for i across obj
          do (set-hierarchy i parent)))
  (:method ((obj vector) parent)
    (loop for i across obj
          do (set-hierarchy i obj))
    obj))

(defun sexp-parse (input)
  (labels ((rec-body (input &optional (keys nil))
             (if (and (keywordp (car input)) (cadr input))
                 (rec-body (cddr input) (append (list (car input) (cadr input))
                                                keys))
                 `(,@keys :body (vector ,@(rec input)))))
           (rec (input)
             (cond ((null input) input)
                   ((atom input) input)
                   ((symbolp (car input))
                    (let ((lookup (assoc (intern (string (car input)) :keyword)
                                         *el-tags*)))
                      (if lookup 
                          `(make-instance ',(cdr lookup)
                                          ,@(rec-body (cdr input)))
                          (cons (car input)
                                (mapcar #'rec (cdr input))))))
                   ((and (listp (car input))
                         (not (null (car input))))
                    (cons (rec (car input))
                          (mapcar #'rec (cdr input))))
                   (t (cons (car input)
                            (mapcar #'rec (cdr input)))))))
    (rec input)))

(defmacro with-html (&body body)
  `(set-hierarchy (vector ,@(sexp-parse body)) nil))

(defmacro with-html-write (stream &body body)
  `(let ((html (set-hierarchy (vector ,@(sexp-parse body)) nil)))
     (values html (html-writer html ,stream))))
